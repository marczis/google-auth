#!/usr/bin/python

import pygtk
pygtk.require('2.0')
import gtk
import time
import oath
import simplecrypt
import getpass
import argparse
import os

class Key:
    def __init__(self, name="", key="", st=""):
        if st:
            self.name, self.key = st.split(":")
        else:
            self.name = name
            self.key  = key

    def __str__(self):
        return "%s:%s\n" % (self.name, self.key)

    def generate(self):
        return oath.from_b32key(self.key).generate()

    def getName(self):
        return self.name


class GAuth:
    def __init__(self, masterpass, keyfile="%s/.gauth/keys" % (os.environ["HOME"])):
        self.keys       = []
        self.keyfile    = keyfile
        self.masterpass = masterpass
        self.readFile()

    def addKey(self, name, key):
        self.keys.append(Key(name, key.replace(" ","")))
        self.writeFile()

    def delKey(self, name):
        item = None
        for i in self.keys:
            if (i.getName() == name):
                item = i
                break
        if item:
           self.keys.remove(item)
           self.writeFile()
        else:
            print "No such key."

    def writeFile(self):
        d = os.path.dirname(self.keyfile)
        if not os.path.exists(d):
            os.makedirs(d)

        cont = ""
        for k in self.keys:
            cont += str(k)

        with open(self.keyfile, "w") as f:
           f.write(simplecrypt.encrypt(self.masterpass, cont))

    def readFile(self):
        try:
            with open(self.keyfile, "r") as f:
                for i in simplecrypt.decrypt(self.masterpass, f.read()).split('\n')[:-1]:
                    self.keys.append(Key(st=i))
        except IOError:
            pass

    def printKey(self):
        for i,v in enumerate(self.keys):
            print "%s: %s" % (i,v.getName())

        print
        print "q: exit"

        pick = raw_input()

        try:
            pick = int(pick)
        except:
            if pick != "q":
                print "A number please..."
                return True
            return False

        try:
            while True:
                z = int(time.strftime("%S"))
                if ( z > 30 ): z -= 30
                z=30-z
                print self.keys[pick].generate(), z

                clipboard = gtk.clipboard_get()
                clipboard.set_text(self.keys[pick].generate())
                clipboard.store()
                time.sleep(1)
        except KeyboardInterrupt:
            return True

if __name__=="__main__":
    args = argparse.ArgumentParser()
    args.add_argument("action", default="gen", choices=['gen', 'add', 'del'])
    p = args.parse_args()

    try:
        if p.action == "gen":
            x=GAuth(getpass.getpass("Master passwd: "))
            while(x.printKey()):
                print "\n\n"
            print "Bye."

        if p.action == "add":
            GAuth(getpass.getpass("Master passwd: ")).addKey(raw_input("Name: "), raw_input("Key: "))
        if p.action == "del":
            GAuth(getpass.getpass("Master passwd: ")).delKey(raw_input("Name: "))
    except simplecrypt.DecryptionException:
        print "Bad master password."
